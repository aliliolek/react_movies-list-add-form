{"version":3,"sources":["types/Movie.ts","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","variables/variables.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieField","MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","count","setCount","isValidImgUrl","isValidImdbUrl","useState","Math","random","toFixed","slice","id","touched","setTouched","useEffect","hasError","trim","hasInvalidImgUrl","ImgUrl","hasInvalidImdbUrl","ImdbUrl","shouldAddDangerClass","inputClassName","classNames","htmlFor","type","event","target","onBlur","pattern","initialMovieState","isValidUrl","url","test","NewMovie","onAdd","newMovie","setNewMovie","buttonDisabled","setButtonDisabled","handleFieldChange","fieldName","prevState","isValid","checkFields","method","onSubmit","preventDefault","prevCount","Title","Description","ImdbId","disabled","App","moviesFromServer","setMovies","trimmedMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02109a0e.chunk.js","sourcesContent":["export interface Movie {\n  title: string;\n  description: string;\n  imgUrl: string;\n  imdbUrl: string;\n  imdbId: string;\n}\n\nexport enum MovieField {\n  Title = 'title',\n  Description = 'description',\n  ImgUrl = 'imgUrl',\n  ImdbUrl = 'imdbUrl',\n  ImdbId = 'imdbId',\n}\n","import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\nexport const MovieCard: React.FC<{ movie: Movie }> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\nexport const MoviesList: React.FC<{ movies: Movie[] }> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { MovieField } from '../../types/Movie';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  count: number,\n  setCount: (value: number) => void,\n  isValidImgUrl?: boolean,\n  isValidImdbUrl?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  count,\n  setCount,\n  isValidImgUrl,\n  isValidImdbUrl,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n\n  const checkCount = () => {\n    if (count > 0) {\n      setTouched(false);\n      setCount(0);\n    }\n  };\n\n  useEffect(() => {\n    checkCount();\n  }, [count]);\n\n  const hasError = touched && required && !value.trim();\n  const hasInvalidImgUrl = touched && required\n    && value && !isValidImgUrl && (name === MovieField.ImgUrl);\n  const hasInvalidImdbUrl = touched && required\n    && value && !isValidImdbUrl && (name === MovieField.ImdbUrl);\n\n  const shouldAddDangerClass = hasError\n    || hasInvalidImgUrl || hasInvalidImdbUrl;\n\n  const inputClassName = classNames('input', {\n    'is-danger': shouldAddDangerClass,\n  });\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={inputClassName}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasInvalidImgUrl && (\n        <p className=\"help is-danger\">{`${name} is invalid`}</p>\n      )}\n\n      {hasInvalidImdbUrl && (\n        <p className=\"help is-danger\">{`${name} is invalid`}</p>\n      )}\n    </div>\n  );\n};\n","// eslint-disable-next-line max-len\nexport const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const initialMovieState = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n","import { useEffect, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie, MovieField } from '../../types/Movie';\nimport { pattern, initialMovieState } from '../../variables/variables';\n\ntype NewMovieProps = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst isValidUrl = (url: string) => pattern.test(url);\n\nexport const NewMovie: React.FC<NewMovieProps> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [newMovie, setNewMovie] = useState(initialMovieState);\n  const [buttonDisabled, setButtonDisabled] = useState(true);\n\n  const handleFieldChange = (fieldName: string, value: string) => {\n    setNewMovie(prevState => ({\n      ...prevState,\n      [fieldName]: value,\n    }));\n  };\n\n  const clearForm = () => {\n    setNewMovie(initialMovieState);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd(newMovie);\n    clearForm();\n    setCount(prevCount => prevCount + 1);\n    setButtonDisabled(true);\n  };\n\n  const checkFields = () => {\n    const notFilled = !newMovie.title.trim() || !newMovie.imgUrl.trim()\n  || !newMovie.imdbUrl.trim() || !newMovie.imdbId.trim();\n\n    const isValid\n    = !notFilled && isValidUrl(newMovie.imgUrl) && isValidUrl(newMovie.imdbUrl);\n\n    setButtonDisabled(!isValid);\n  };\n\n  useEffect(() => {\n    checkFields();\n  }, [newMovie]);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name={`${MovieField.Title}`}\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={value => handleFieldChange(MovieField.Title, value)}\n        required\n        count={count}\n        setCount={setCount}\n      />\n\n      <TextField\n        name={`${MovieField.Description}`}\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={value => {\n          handleFieldChange(MovieField.Description, value);\n        }}\n        count={count}\n        setCount={setCount}\n      />\n\n      <TextField\n        name={`${MovieField.ImgUrl}`}\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        required\n        onChange={value => handleFieldChange(MovieField.ImgUrl, value)}\n        count={count}\n        setCount={setCount}\n        isValidImgUrl={isValidUrl(newMovie.imgUrl)}\n      />\n\n      <TextField\n        name={`${MovieField.ImdbUrl}`}\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        required\n        onChange={value => handleFieldChange(MovieField.ImdbUrl, value)}\n        count={count}\n        setCount={setCount}\n        isValidImdbUrl={isValidUrl(newMovie.imdbUrl)}\n      />\n\n      <TextField\n        name={`${MovieField.ImdbId}`}\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        required\n        onChange={value => handleFieldChange(MovieField.ImdbId, value)}\n        count={count}\n        setCount={setCount}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={buttonDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const addMovies = (movie: Movie) => {\n    const trimmedMovie = {\n      ...movie,\n      title: movie.title.trim(),\n      description: movie.description.trim(),\n      imgUrl: movie.imgUrl.trim(),\n      imdbUrl: movie.imdbUrl.trim(),\n      imdbId: movie.imdbId.trim(),\n    };\n\n    setMovies(prevMovies => [...prevMovies, trimmedMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}