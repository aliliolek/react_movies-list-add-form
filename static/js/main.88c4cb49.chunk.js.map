{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","count","useState","Math","random","toFixed","slice","id","touched","setTouched","useEffect","hasError","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","setCount","newMovie","setNewMovie","buttonDisabled","setButtonDisabled","handleFieldChange","fieldName","prevState","fieldsAreFilled","checkFields","method","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88c4cb49.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  count: number,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  count,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n\n  const checkCount = () => {\n    if (count > 0) {\n      setTouched(false);\n    }\n  };\n\n  useEffect(() => {\n    checkCount();\n  }, [count]);\n\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface NewMovieProps {\n  onAdd: (movie: Movie) => void;\n}\n\nexport const NewMovie: React.FC<NewMovieProps> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n  const [buttonDisabled, setButtonDisabled] = useState(true);\n\n  const handleFieldChange = (fieldName: string, value: string) => {\n    setNewMovie(prevState => ({\n      ...prevState,\n      [fieldName]: value,\n    }));\n  };\n\n  const clearForm = () => {\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd(newMovie);\n    clearForm();\n    setCount(1);\n  };\n\n  const checkFields = () => {\n    // тут !'' = true значить кнопка disabled\n    const fieldsAreFilled = !newMovie.title || !newMovie.imgUrl\n      || !newMovie.imdbUrl || !newMovie.imdbId;\n\n    setButtonDisabled(fieldsAreFilled);\n  };\n\n  useEffect(() => {\n    checkFields();\n  }, [newMovie]);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={value => handleFieldChange('title', value)}\n        required\n        count={count}\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={value => handleFieldChange('description', value)}\n        count={count}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        required\n        onChange={value => handleFieldChange('imgUrl', value)}\n        count={count}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        required\n        onChange={value => handleFieldChange('imdbUrl', value)}\n        count={count}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        required\n        onChange={value => handleFieldChange('imdbId', value)}\n        count={count}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={buttonDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const addMovies = (movie: Movie) => {\n    setMovies(prevMovies => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}